\documentclass[12pt]{article}

\begin{document}

%---title---%
\title{Setting up MySQL on the Cluster after Rebuild}
\date{\today}
\author{Samantha Wohlstadter}
\thispagestyle{empty}
\maketitle

%----begin---%  %\subsection{}, \begin{itmeize} + \item
(In Progress)

\section{Setting up the Configuraton File}

 When first starting MySQL, you need to make sure the correct paths to the socket file and the databases are specified in the configuration file. It is located on the CE at {\tt /etc/my.cnf}

 The file {\tt /opt/rocks/mysql/my.cnf} should contain the correct information which can simply be copied over to {\tt /etc/my.cnf}, but this file is not looked at by MySQL when it runs. If this file does not exist, the correct socket should be {\tt socket=/var/opt/rocks/mysql/mysql.sock}, and the data directory should be {\tt datadir=/var/opt/rocks/mysql/}. Make sure to specify the paths under both the [mysqld] and the [client] headings.

 After making changes to the configuration file, make sure to restart apachectl and the mysql server.
    {\tt /usr/sbin/apachectl graceful}
    {\tt /opt/rocks/mysql/support-files/mysql.server restart }

\section{Importing Databases}
%granting privileges, (pass reset, misc. notes, errors)
The databses used in mysql for the cluster tend to be in ``InnoDB'' format. What that means as far as importing databases go is that one cannot simply copy the folders directly from the old databse to the new one. MySQL cannot read the files this way. Instead, the old databases must be 'dumped' using the mysqldump command.
\subsection{The Proper Procedure}
To export a database, run the following:
    {\tt mysqldump -u root -p (database) > (database).sql}

To import a database, first create the database in mysql using {\tt ``create database (name);} Then, quit MySQL and run the following: 
    {\tt mysql -u root -p (database) < (database).sql}    

Once you have imported the databases, be sure to give the appropriate permissions. For example, granting permission for apache to access the wikidatabase:
    {\tt GRANT ALL PRIVILEGES ON (database)* TO (user)@localhost}

Be sure to update appripriate config files when changes are made, such as LocalSettings for the wiki page. 

\subsection{The Hard Way to Import Databases}
If you do not have the .sql files, and the old mysql server is not able to run, the databases can still be accessed to create .sql files. You will need the ``ibdata1'' file from the old mysql server to be able to open the databases. The old mysql files are located on nas1 in CEBackup-20180803/var/lib/mysql. 
The following procedure was performed on a different machine than the new mysql server, though it can be done on the same machine.
\begin{itemize}
\item Stop MySQL using {\tt /opt/rocks/mysql/support-files/mysql.server stop}
\item Create a copy of the current data directory (in this case it is /var/opt/rocks/mysql) and rename it (backup)
\item Copy the desired database folders (excluding ``mysql'') from the old server to the new server.
\item Start MySQL using /opt/rocks/mysql/support-files/mysql.server start
\item Log in to mysql and run ``use (database); show tables; select * from (table);'' on the old databases you just copied over, one at a time. You should get ``table does not exist''. This is okay at this point, you are ``showing'' mysql that these databases and tables exist in its data directory now, even though it can't read them yet. 
\item Quit mysql, then stop using /opt/rocks/mysql/support-files/mysql.server stop
\item Replace the ibdata1 file with the file of the same name from the old MySQL server.
\item (Optional?) Replace the mysql database with the databse from the old server. (You must know the password from the old server to log in). 
\item Start the mysql service with /opt/rocks/mysql/support-files/mysql.server start
\item Log in to mysql and test the database with ``use database; show tables; select * from (tablename)'' You should get a table of data as the output now.
\item If the above step was successful, log out of mysql and use mysqldump as above to create the .sql files and import them as above. If you used the same machine to do this, make sure to rename the current mysql directory to something else, and rename the backup to ``mysql/''
  You should then be able to access the data in the new server. (use (database); show tables; select * from (table);)
\end{itemize}
%---------------------------------------------------------------------------------------------
%a number of things including insert-ethers and the website depend on MySQL
%website - LocalSettings.php file dbuser, pass, etc.
%Mediawiki.org: Important for DB access are $wgDBserver, $wgDBname, $wgDBpassword and $wgDBuser.
%sidenote for website: you need to add a line to the iptables to allow incoming port 80 connections - iptables -I INPUT 5 -p tcp -m state --state NEW,ESTABLISHED -m tcp --dport 80 -j ACCEPT'' to insert a new rule under input at line 5
%(above the first REJECT) to accept incoming connections to port 80, ``then service iptables save'' to save the file /etc/sysconfig/iptables
%another note - do not try to fix the website before the nodes are set up, otherwise it messes with insert-ethers and you will have to reinstall the CE and start over. 

%get the error when trying to run: Error 2002: Can't connect to local MySQL server through socket 'var/lib/mysql/mysql.sock.'
%The sock file either isnt there or the path specified in /etc/my.cnf is incorrect - see section 1
% check to see if mysql server is running: ``netstat -tap | grep mysql - it should be, or try /opt/rocks/mysql/bin/mysqld start
% if you see ``/opt/rocks/mysql/bin/mysqld: Can't change dir to '/var/lib/mysql/' (Errcode: 2 - No such file or directory)'' change my.cnf
    %mysql --socket=/var/opt/rocks/mysql/mysql.sock  -u (user) -p also works as a temporary measure.

    % you will see a similar entry in the error log:
    %``[Warning] InnoDB: Cannot open table wikidatabase/archive from the internal data dictionary of InnoDB though the .frm file f\
    %or the table exists. See http://dev.mysql.com/doc/refman/5.6/en/innodb-troubleshooting.html for how you can resolve the problem.'' 
     %see section - exporting databases the hard way

% to reset the password
%warning - a lot of things depend on mysql and if you change the password you will ahve to change it for the other things too like for
%insert-ethers. 
%need to edit my.cnf file or you will get errors trying to start mysql-safemode such as 
%190112 20:40:46 mysqld_safe Starting mysqld daemon with databases from /var/opt/rocks/mysql
%190112 20:40:46 mysqld_safe mysqld from pid file /var/run/mariadb/mariadb.pid ended
%2019-01-12 20:55:30 23092 [ERROR] /opt/rocks/mysql/bin/mysqld: Can't create/write to file '/var/run/mariadb/mariadb.pid' (Errcode: 2 - No such file or directory)
%2019-01-12 20:55:30 23092 [ERROR] Can't start server: can't create PID file: No such file or directory
% if you get a permission denied error, check permissions of my mysql folder. should be owned my ``mysql'' - do chown -R mysql:mysql (directory)
%/opt/rocks/mysql/bin/mysqld_safe --basedir=/opt/rocks/mysql --datadir=/var/opt/rocks/mysql --log-error=/var/opt/rocks/mysql/uscms1.fltech-grid3.fit.edu.err --skip-grant-tables
%(new terminal) mysql --socket=/var/opt/rocks/mysql/mysql.sock -u root
%UPDATE mysql.user SET authentication_string=PASSWORD('password') WHERE User='root'; or
%                  SET Password=PASSWORD('password') WHERE User='root';
%FLUSH PRIVILEGES; (In MySQL 5.7, the password field in mysql.user table field was removed, now the field name is 'authentication_string'.)
%Quit mysql
%mysqladmin --socket=/var/opt/rocks/mysql/mysql.sock -u root -p shutdown - at this point mysqlsafe in the first terminal should end
%start MySQL with /opt/rocks/mysql/support-files/mysql.server start
%note: LocalSettings.php for the wiki doesn't like double quotes in the password

\end{document}
